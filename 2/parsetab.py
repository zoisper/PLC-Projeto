
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOL COFF COM COMA CON DIFF DIV EQEQ EQUAL FALSE GREAEQ GREATER IF INT LBRACE LCURLY LESSEQ LESSER MAIN MINUS MUL NUM PLUS RBRACE RCURLY REAL SEMICOLON STRING TRUE VAR WHILE\n\tprogram : MAIN LCURLY body RCURLY\n\t\n\tbody : \n\tbody : declarations instructions\n\t\n\tdeclarations : \n\tdeclarations : declaration  declarations\n\t\n\tdeclaration : type declare SEMICOLON \n\t\n\tdeclare : VAR \n\tdeclare : VAR COMA declare\n\t\n\ttype : BOOL\n\ttype : INT\n\t\n\tinstructions :\n\tinstructions : instruction  instructions\n\t\n\tinstruction : cicle\n\tinstruction : conditional\n\tinstruction : atribution \n\t\n\tcicle : WHILE LBRACE condition RBRACE LCURLY instructions RCURLY\n\t\n\tconditional : IF LBRACE condition RBRACE LCURLY instructions RCURLY\n\t\n\tatribution : VAR EQUAL TRUE SEMICOLON\n\tatribution : VAR EQUAL FALSE SEMICOLON\n\tatribution : VAR EQUAL expression SEMICOLON\n\t\n\tcondition : expression EQEQ expression\n\tcondition : VAR EQEQ expression\n\tcondition : VAR DIFF expression\n\tcondition : VAR EQEQ TRUE\n\tcondition : VAR EQEQ FALSE\n\tcondition : VAR DIFF TRUE\n\tcondition : VAR DIFF FALSE\n\tcondition : expression GREATER expression\n\tcondition : expression LESSER expression\n\tcondition : expression GREAEQ expression\n\tcondition : expression LESSEQ expression\n\tcondition : expression DIFF expression\n\tcondition : TRUE\n\tcondition : FALSE\n\t\n\texpression : VAR\n\texpression : REAL\n\texpression : NUM\n\texpression : LBRACE expression RBRACE\n\texpression : expression PLUS expression\n\texpression : expression MINUS expression\n\texpression : expression MUL expression\n\texpression : expression DIV expression\n\t'
    
_lr_action_items = {'MAIN':([0,],[2,]),'$end':([1,10,],[0,-1,]),'LCURLY':([2,43,56,],[3,61,78,]),'RCURLY':([3,4,5,6,11,12,13,14,15,19,22,26,57,58,59,61,78,79,80,81,82,],[-2,10,-11,-4,-3,-11,-13,-14,-15,-5,-12,-6,-18,-19,-20,-11,-11,81,82,-16,-17,]),'WHILE':([3,5,6,12,13,14,15,19,26,57,58,59,61,78,81,82,],[-4,16,-4,16,-13,-14,-15,-5,-6,-18,-19,-20,16,16,-16,-17,]),'IF':([3,5,6,12,13,14,15,19,26,57,58,59,61,78,81,82,],[-4,17,-4,17,-13,-14,-15,-5,-6,-18,-19,-20,17,17,-16,-17,]),'VAR':([3,5,6,7,8,9,12,13,14,15,19,23,24,25,26,27,28,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,61,78,81,82,],[-4,18,-4,21,-9,-10,18,-13,-14,-15,-5,31,31,37,-6,21,37,37,37,37,37,37,37,37,37,37,37,37,37,-18,-19,-20,18,18,-16,-17,]),'BOOL':([3,6,26,],[8,8,-6,]),'INT':([3,6,26,],[9,9,-6,]),'LBRACE':([16,17,23,24,25,28,44,45,46,47,48,49,50,51,52,53,54,55,],[23,24,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'EQUAL':([18,],[25,]),'SEMICOLON':([20,21,34,35,37,38,39,40,41,60,68,69,70,71,],[26,-7,-36,-37,-35,57,58,59,-8,-38,-39,-40,-41,-42,]),'COMA':([21,],[27,]),'TRUE':([23,24,25,54,55,],[32,32,38,73,76,]),'FALSE':([23,24,25,54,55,],[33,33,39,74,77,]),'REAL':([23,24,25,28,44,45,46,47,48,49,50,51,52,53,54,55,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'NUM':([23,24,25,28,44,45,46,47,48,49,50,51,52,53,54,55,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'RBRACE':([29,32,33,34,35,36,37,42,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[43,-33,-34,-36,-37,56,-35,60,-38,-21,-28,-29,-30,-31,-32,-39,-40,-41,-42,-22,-24,-25,-23,-26,-27,]),'EQEQ':([30,31,34,35,37,60,68,69,70,71,],[44,54,-36,-37,-35,-38,-39,-40,-41,-42,]),'GREATER':([30,31,34,35,37,60,68,69,70,71,],[45,-35,-36,-37,-35,-38,-39,-40,-41,-42,]),'LESSER':([30,31,34,35,37,60,68,69,70,71,],[46,-35,-36,-37,-35,-38,-39,-40,-41,-42,]),'GREAEQ':([30,31,34,35,37,60,68,69,70,71,],[47,-35,-36,-37,-35,-38,-39,-40,-41,-42,]),'LESSEQ':([30,31,34,35,37,60,68,69,70,71,],[48,-35,-36,-37,-35,-38,-39,-40,-41,-42,]),'DIFF':([30,31,34,35,37,60,68,69,70,71,],[49,55,-36,-37,-35,-38,-39,-40,-41,-42,]),'PLUS':([30,31,34,35,37,40,42,60,62,63,64,65,66,67,68,69,70,71,72,75,],[50,-35,-36,-37,-35,50,50,-38,50,50,50,50,50,50,50,50,50,50,50,50,]),'MINUS':([30,31,34,35,37,40,42,60,62,63,64,65,66,67,68,69,70,71,72,75,],[51,-35,-36,-37,-35,51,51,-38,51,51,51,51,51,51,51,51,51,51,51,51,]),'MUL':([30,31,34,35,37,40,42,60,62,63,64,65,66,67,68,69,70,71,72,75,],[52,-35,-36,-37,-35,52,52,-38,52,52,52,52,52,52,52,52,52,52,52,52,]),'DIV':([30,31,34,35,37,40,42,60,62,63,64,65,66,67,68,69,70,71,72,75,],[53,-35,-36,-37,-35,53,53,-38,53,53,53,53,53,53,53,53,53,53,53,53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'body':([3,],[4,]),'declarations':([3,6,],[5,19,]),'declaration':([3,6,],[6,6,]),'type':([3,6,],[7,7,]),'instructions':([5,12,61,78,],[11,22,79,80,]),'instruction':([5,12,61,78,],[12,12,12,12,]),'cicle':([5,12,61,78,],[13,13,13,13,]),'conditional':([5,12,61,78,],[14,14,14,14,]),'atribution':([5,12,61,78,],[15,15,15,15,]),'declare':([7,27,],[20,41,]),'condition':([23,24,],[29,36,]),'expression':([23,24,25,28,44,45,46,47,48,49,50,51,52,53,54,55,],[30,30,40,42,62,63,64,65,66,67,68,69,70,71,72,75,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> MAIN LCURLY body RCURLY','program',4,'p_program','parser.py',10),
  ('body -> <empty>','body',0,'p_body','parser.py',15),
  ('body -> declarations instructions','body',2,'p_body','parser.py',16),
  ('declarations -> <empty>','declarations',0,'p_declarations','parser.py',22),
  ('declarations -> declaration declarations','declarations',2,'p_declarations','parser.py',23),
  ('declaration -> type declare SEMICOLON','declaration',3,'p_declaration','parser.py',28),
  ('declare -> VAR','declare',1,'p_delcare','parser.py',33),
  ('declare -> VAR COMA declare','declare',3,'p_delcare','parser.py',34),
  ('type -> BOOL','type',1,'p_type','parser.py',40),
  ('type -> INT','type',1,'p_type','parser.py',41),
  ('instructions -> <empty>','instructions',0,'p_instructions','parser.py',46),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','parser.py',47),
  ('instruction -> cicle','instruction',1,'p_instruction','parser.py',52),
  ('instruction -> conditional','instruction',1,'p_instruction','parser.py',53),
  ('instruction -> atribution','instruction',1,'p_instruction','parser.py',54),
  ('cicle -> WHILE LBRACE condition RBRACE LCURLY instructions RCURLY','cicle',7,'p_cicle','parser.py',58),
  ('conditional -> IF LBRACE condition RBRACE LCURLY instructions RCURLY','conditional',7,'p_conditional','parser.py',63),
  ('atribution -> VAR EQUAL TRUE SEMICOLON','atribution',4,'p_atribution','parser.py',68),
  ('atribution -> VAR EQUAL FALSE SEMICOLON','atribution',4,'p_atribution','parser.py',69),
  ('atribution -> VAR EQUAL expression SEMICOLON','atribution',4,'p_atribution','parser.py',70),
  ('condition -> expression EQEQ expression','condition',3,'p_condition','parser.py',76),
  ('condition -> VAR EQEQ expression','condition',3,'p_condition','parser.py',77),
  ('condition -> VAR DIFF expression','condition',3,'p_condition','parser.py',78),
  ('condition -> VAR EQEQ TRUE','condition',3,'p_condition','parser.py',79),
  ('condition -> VAR EQEQ FALSE','condition',3,'p_condition','parser.py',80),
  ('condition -> VAR DIFF TRUE','condition',3,'p_condition','parser.py',81),
  ('condition -> VAR DIFF FALSE','condition',3,'p_condition','parser.py',82),
  ('condition -> expression GREATER expression','condition',3,'p_condition','parser.py',83),
  ('condition -> expression LESSER expression','condition',3,'p_condition','parser.py',84),
  ('condition -> expression GREAEQ expression','condition',3,'p_condition','parser.py',85),
  ('condition -> expression LESSEQ expression','condition',3,'p_condition','parser.py',86),
  ('condition -> expression DIFF expression','condition',3,'p_condition','parser.py',87),
  ('condition -> TRUE','condition',1,'p_condition','parser.py',88),
  ('condition -> FALSE','condition',1,'p_condition','parser.py',89),
  ('expression -> VAR','expression',1,'p_expression','parser.py',93),
  ('expression -> REAL','expression',1,'p_expression','parser.py',94),
  ('expression -> NUM','expression',1,'p_expression','parser.py',95),
  ('expression -> LBRACE expression RBRACE','expression',3,'p_expression','parser.py',96),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',97),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',98),
  ('expression -> expression MUL expression','expression',3,'p_expression','parser.py',99),
  ('expression -> expression DIV expression','expression',3,'p_expression','parser.py',100),
]
